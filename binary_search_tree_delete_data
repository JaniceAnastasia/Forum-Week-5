#include <stdio.h>
#include <conio.h>
#include <malloc.h>

using namespace std;
 
struct node {
    int key;
    struct node *left, *right;
};
 
struct node* newNode(int item)
{
    struct node* temp
        = (struct node*)malloc(sizeof(struct node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}
 
void inorder(struct node* root)
{
    if (root != NULL) {
        inorder(root->left);
        cout << root->key;
        inorder(root->right);
    }
}
 
struct node* insert(struct node* node, int key)
{
    if (node == NULL)
        return newNode(key);
 
    if (key < node->key)
        node->left = insert(node->left, key);
    else
        node->right = insert(node->right, key);
 
    return node;
}
 
struct node* minValueNode(struct node* node)
{
    struct node* current = node;
 
    while (current && current->left != NULL)
        current = current->left;
 
    return current;
}
 
deletes the key and returns the new root */
struct node* deleteNode(struct node* root, int key)
{
    if (root == NULL)
        return root;
 
    if (key < root->key)
        root->left = deleteNode(root->left, key);

    else if (key > root->key)
        root->right = deleteNode(root->right, key);

    else {
        if (root->left==NULL and root->right==NULL)
            return NULL;
       
        else if (root->left == NULL) {
            struct node* temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL) {
            struct node* temp = root->left;
            free(root);
            return temp;
        }

        struct node* temp = minValueNode(root->right);
 
        root->key = temp->key;

        root->right = deleteNode(root->right, temp->key);
    }
    return root;
}

//13, 27, 83, 67, 1, 90, 37, 40, 62, 102, 53, 72, 34, 21, 20
int main()
{
    struct node* root = NULL;
    root = insert(root, 13);
    root = insert(root, 27);
    root = insert(root, 83);
    root = insert(root, 67);
    root = insert(root, 1);
    root = insert(root, 90);
    root = insert(root, 37);
    root = insert(root, 40);
    root = insert(root, 62);
    root = insert(root, 102);
    root = insert(root, 53);
    root = insert(root, 72);
    root = insert(root, 34);
    root = insert(root, 21);
    root = insert(root, 20);
 
    cout << "Inorder traversal of the given tree \n";
    inorder(root);
 
    cout << "\nDelete 102\n";
    root = deleteNode(root, 102);
    cout << "Inorder traversal of the modified tree \n";
    inorder(root);

    return 0;
}
